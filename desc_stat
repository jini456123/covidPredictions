"""
original file dates range from 1/22/20 to 3/21/20
descriptive stat on global daily total confirmed vs US
"""
import pandas as pd
import numpy as np

file = pd.read_csv("Today_Covid_Confirmed.csv")
df = pd.DataFrame(file)

def find_median(lst):
    
    n = len(lst)
    n_sort = sorted(lst)
    
    if n % 2 == 0: 

        median1 = n_sort[n//2]
        median2 = n_sort[n//2 - 1] 
        median = (median1 + median2)/2

    
    else: 
        median = n_sort[n//2]
    
    return median



def find_quartile(lst, empty1, empty2):
        n = len(lst)
        n_sort = sorted(lst)
        middle = n//2

        q1 = find_median(n_sort[:middle])
        q3 = find_median(n_sort[middle:])
        
        empty1.append(q1)
        empty2.append(q3)
        return empty1, empty2
        
def new_df(df_):
    '''
    create sum, mean, median, q1, q3 variables for each data
    create a dictionary: insert column names as key, stats as values
    index as dates
    return new df
    '''
    
    regionNames = df_['Province/State'].values
    #countries = df_['Country/Region'].values
    groupby = df_.groupby('Country/Region').sum() 
    countryNames = groupby.index
    
    if len(countryNames) == 1:
        
        regionNames_d = {}
        regionNames_d2 = {}
        onlydates = df_.iloc[:,2:]
        
        for names in regionNames:
            regionNames_d[names] = onlydates[df_['Province/State'] == names].values
        
        for keys, vals in regionNames_d.items():
            if np.any(regionNames_d[keys] >= 100):
                regionNames_d2[keys] = vals
            
        selected = onlydates[df_['Province/State'].isin(regionNames_d2.keys())]
        dailysum = selected.sum()
        dailytotal = dailysum.values
        length = len(selected.index)
        
        total_regions = 0
        for regions in range(len(selected)):
            total_regions += 1
            
        dailymean = []
        
        for i in dailytotal:
            mean = i/length
            mean = float("%.4f"%mean)
            dailymean.append(mean)
        
        
        dailyvals = []
        
        for rows in selected.items():
            row = [rows[1].values]
            dailyvals.append(row)
            
        median = []
        q1 = []
        q3 = []
        minx = []
        maxx = []
                             
        for lists in dailyvals:
            for each in lists:
                median.append(find_median(each))
                find_quartile(each, q1, q3)
                minx.append(min(each))
                maxx.append(max(each))
        
        df_dict = {}
        df_dict['Num_Regions'] = total_regions
        df_dict['Total_Confirm_Daily'] = dailytotal
        df_dict['Avg_Confirm_Daily'] = dailymean
        df_dict['Med_Confirm_Daily'] = median
        df_dict['Q_1_Confirm_Daily'] = q1
        df_dict['Q_3_Confirm_Daily'] = q3
        df_dict['Min_Confirm_Daily'] = minx
        df_dict['Max_Confirm_Daily'] = maxx
    

    elif len(countryNames) > 1:
        series = np.array(groupby) #list of daily numbers for each country
        regionNames_d = {} #get only the countries having at least 100 counts throughout timeline
        regionNames_d2 = {}
        
        for idx, names in enumerate(countryNames): #170 columns/countries
            regionNames_d[names] = series[idx]


        for keys, vals in regionNames_d.items(): #77 countries
            if np.any(regionNames_d[keys] >= 100):
                regionNames_d2[keys] = vals
            
        selected = groupby[groupby.index.isin(regionNames_d2.keys())] #61 days of selected 77 countries
        dailysum = selected.sum()
        dailytotal = dailysum.values
        length = len(selected.index)
        
        total_regions = 0
        
        for regions in range(len(selected)):
            total_regions += 1
        
        dailymean = []

        for i in dailytotal:
            mean = i/length
            mean = float("%.4f"%mean)
            dailymean.append(mean)


        dailyvals = []
        for columns in selected:
            daily = selected[columns].values
            dailyvals.append([daily]) 
            
        
        q1 = []
        q3 = []
        minx = []
        maxx = []
        median = []
        for lists in dailyvals:
            for items in lists:
                median.append(find_median(items))
                find_quartile(items, q1, q3)
                minx.append(min(items))
                maxx.append(max(items))

        df_dict = {}
        df_dict['Num_Regions'] = total_regions
        df_dict['Total_Confirm_Daily'] = dailytotal
        df_dict['Avg_Confirm_Daily'] = dailymean
        df_dict['Med_Confirm_Daily'] = median
        df_dict['Q_1_Confirm_Daily'] = q1
        df_dict['Q_3_Confirm_Daily'] = q3
        df_dict['Min_Confirm_Daily'] = minx
        df_dict['Max_Confirm_Daily'] = maxx
    
    newdf = pd.DataFrame(df_dict)
    return newdf
